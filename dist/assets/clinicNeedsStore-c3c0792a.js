import{aj as e,ak as t}from"./index-3a8dc84c.js";import{c as r}from"./utils-ec524415.js";
/**
 * @license lucide-react v0.294.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const i=e("ClipboardList",[["rect",{width:"8",height:"4",x:"8",y:"2",rx:"1",ry:"1",key:"tgr4d6"}],["path",{d:"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2",key:"116196"}],["path",{d:"M12 11h4",key:"1jrz19"}],["path",{d:"M12 16h4",key:"n85exb"}],["path",{d:"M8 11h.01",key:"1dfujw"}],["path",{d:"M8 16h.01",key:"18s6g9"}]]),n=r()(t((e,t)=>({needs:[],filteredNeeds:[],selectedNeed:null,isLoading:!1,error:null,searchQuery:"",filters:{},categories:[],suppliers:[],totalNeeds:0,totalValue:0,pendingCount:0,orderedCount:0,receivedCount:0,urgentCount:0,loadNeeds:async()=>{e({isLoading:!0,error:null});try{const r=await(window.electronAPI?.clinicNeeds?.getAll())||[];e({needs:r,filteredNeeds:r,isLoading:!1}),t().calculateAnalytics(),t().updateCategories(),t().updateSuppliers(),t().filterNeeds()}catch(r){console.error("Error loading clinic needs:",r),e({error:r instanceof Error?r.message:"Failed to load clinic needs",isLoading:!1})}},createNeed:async r=>{e({isLoading:!0,error:null});try{const i=await window.electronAPI.clinicNeeds.create(r),{needs:n}=t(),d=[...n,i];e({needs:d,isLoading:!1}),t().calculateAnalytics(),t().updateCategories(),t().updateSuppliers(),t().filterNeeds(),"undefined"!=typeof window&&window.dispatchEvent&&window.dispatchEvent(new CustomEvent("clinic-needs-changed",{detail:{type:"created",needId:i.id,need:i}}))}catch(i){console.error("Error creating clinic need:",i),e({error:i instanceof Error?i.message:"Failed to create clinic need",isLoading:!1})}},updateNeed:async(r,i)=>{e({isLoading:!0,error:null});try{const n=await window.electronAPI.clinicNeeds.update(r,i),{needs:d}=t(),s=d.map(e=>e.id===r?n:e);e({needs:s,isLoading:!1}),t().calculateAnalytics(),t().updateCategories(),t().updateSuppliers(),t().filterNeeds(),"undefined"!=typeof window&&window.dispatchEvent&&window.dispatchEvent(new CustomEvent("clinic-needs-changed",{detail:{type:"updated",needId:r,need:n}}))}catch(n){console.error("Error updating clinic need:",n),e({error:n instanceof Error?n.message:"Failed to update clinic need",isLoading:!1})}},deleteNeed:async r=>{e({isLoading:!0,error:null});try{await window.electronAPI.clinicNeeds.delete(r);const{needs:i}=t(),n=i.filter(e=>e.id!==r);e({needs:n,selectedNeed:null,isLoading:!1}),t().calculateAnalytics(),t().updateCategories(),t().updateSuppliers(),t().filterNeeds(),"undefined"!=typeof window&&window.dispatchEvent&&window.dispatchEvent(new CustomEvent("clinic-needs-changed",{detail:{type:"deleted",needId:r}}))}catch(i){console.error("Error deleting clinic need:",i),e({error:i instanceof Error?i.message:"Failed to delete clinic need",isLoading:!1})}},setSelectedNeed:t=>e({selectedNeed:t}),setSearchQuery:r=>{e({searchQuery:r}),t().filterNeeds()},setFilters:r=>{e({filters:r}),t().filterNeeds()},clearError:()=>e({error:null}),filterNeeds:()=>{const{needs:r,searchQuery:i,filters:n}=t();let d=r;if(i.trim()){const e=i.toLowerCase().trim();d=d.filter(t=>t.need_name.toLowerCase().includes(e)||t.serial_number.toLowerCase().includes(e)||t.description?.toLowerCase().includes(e)||t.category?.toLowerCase().includes(e)||t.supplier?.toLowerCase().includes(e))}n.category&&(d=d.filter(e=>e.category===n.category)),n.priority&&(d=d.filter(e=>e.priority===n.priority)),n.status&&(d=d.filter(e=>e.status===n.status)),e({filteredNeeds:d})},calculateAnalytics:()=>{const{needs:r}=t(),i=r.length,n=r.reduce((e,t)=>e+(Number(t.price)||0)*(Number(t.quantity)||0),0),d=r.filter(e=>"pending"===e.status).length,s=r.filter(e=>"ordered"===e.status).length,a=r.filter(e=>"received"===e.status).length,o=r.filter(e=>"urgent"===e.priority).length;e({totalNeeds:i,totalValue:n,pendingCount:d,orderedCount:s,receivedCount:a,urgentCount:o})},getNeedsByStatus:e=>t().needs.filter(t=>t.status===e),getNeedsByPriority:e=>t().needs.filter(t=>t.priority===e),updateCategories:()=>{const{needs:r}=t(),i=[...new Set(r.map(e=>e.category).filter(e=>Boolean(e)))];e({categories:i})},updateSuppliers:()=>{const{needs:r}=t(),i=[...new Set(r.map(e=>e.supplier).filter(e=>Boolean(e)))];e({suppliers:i})},getNextSerialNumber:()=>{const{needs:e}=t();let r=0;return e.forEach(e=>{const t=e.serial_number;if(t.match(/^\d+$/)){const e=parseInt(t,10);e>r&&(r=e)}}),(r+1).toString()}}),{name:"clinic-needs-store"}));export{i as C,n as u};
