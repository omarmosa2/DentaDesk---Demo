import{r as e}from"./vendor-696af5bd.js";import{ak as t}from"./index-3a8dc84c.js";import{c as r}from"./utils-ec524415.js";const n=()=>{const e=new Date;return{dateRange:{start:new Date(e.getFullYear(),e.getMonth(),1).toISOString().split("T")[0],end:e.toISOString().split("T")[0],preset:"month"}}},a=r()(t((e,t)=>("undefined"!=typeof window&&(window.addEventListener("patient-deleted",async e=>{const{clearCache:r,generateReport:n}=t();r();try{await n("patients")}catch(a){console.error("Error refreshing reports after patient deletion:",a)}}),window.addEventListener("patient-added",async e=>{const{clearCache:r,generateReport:n}=t();r();try{await n("patients")}catch(a){console.error("Error refreshing reports after patient addition:",a)}}),window.addEventListener("patient-updated",async e=>{const{clearCache:r,generateReport:n}=t();r();try{await n("patients")}catch(a){console.error("Error refreshing reports after patient update:",a)}}),window.addEventListener("appointment-changed",async e=>{const{clearCache:r,generateReport:n}=t();r();try{await n("appointments")}catch(a){console.error("Error refreshing appointment reports:",a)}}),window.addEventListener("payment-changed",async e=>{const{clearCache:r,generateReport:n}=t();r();try{await n("financial")}catch(a){console.error("Error refreshing financial reports:",a)}}),window.addEventListener("inventory-changed",async e=>{const{clearCache:r,generateReport:n}=t();r();try{await n("inventory")}catch(a){console.error("Error refreshing inventory reports:",a)}}),window.addEventListener("clinic-needs-changed",async e=>{const{clearCache:r,generateReport:n}=t();r();try{await n("clinicNeeds")}catch(a){console.error("Error refreshing clinic needs reports:",a)}})),{reportData:null,patientReports:null,appointmentReports:null,financialReports:null,inventoryReports:null,analyticsReports:null,treatmentReports:null,clinicNeedsReports:null,isLoading:!1,isExporting:!1,error:null,activeReportType:"overview",currentFilter:n(),savedFilters:[],cachedReports:new Map,cacheExpiry:3e5,autoRefreshInterval:null,generateReport:async(r,n)=>{const{currentFilter:a,getCachedReport:o,setCachedReport:i,cacheExpiry:s}=t(),c={...a,...n},l=((e,t)=>`${e}_${JSON.stringify(t)}`)(r,c),d=o(l);if(d)e({[`${r}Reports`]:d,isLoading:!1});else{e({isLoading:!0,error:null});try{let n=null;switch(r){case"patients":n=await(window.electronAPI?.reports?.generatePatientReport(c)),e({patientReports:n});break;case"appointments":n=await(window.electronAPI?.reports?.generateAppointmentReport(c)),e({appointmentReports:n});break;case"financial":n=await(window.electronAPI?.reports?.generateFinancialReport(c)),e({financialReports:n});break;case"inventory":n=await(window.electronAPI?.reports?.generateInventoryReport(c)),e({inventoryReports:n});break;case"analytics":n=await(window.electronAPI?.reports?.generateAnalyticsReport(c)),e({analyticsReports:n});break;case"treatments":n=await(window.electronAPI?.reports?.generateTreatmentReport(c)),e({treatmentReports:n});break;case"clinicNeeds":n=await t().generateClinicNeedsReport(c),e({clinicNeedsReports:n});break;case"overview":n=await(window.electronAPI?.reports?.generateOverviewReport(c)),e({reportData:n})}n&&i(l,n),e({isLoading:!1})}catch(p){console.error(`❌ Error generating ${r} report:`,p),e({error:p instanceof Error?p.message:`Failed to generate ${r} report`,isLoading:!1})}}},generateAllReports:async r=>{const{generateReport:n}=t(),a=["patients","appointments","financial","inventory","analytics","treatments","clinicNeeds"];e({isLoading:!0,error:null});try{for(const e of a)await n(e,r);e({isLoading:!1})}catch(o){console.error("❌ Error generating all reports:",o),e({error:o instanceof Error?o.message:"Failed to generate reports",isLoading:!1})}},refreshReports:async()=>{const{activeReportType:e,currentFilter:r,clearCache:n}=t();n(),await t().generateReport(e,r)},setFilter:r=>{e({currentFilter:{...t().currentFilter,...r}})},resetFilter:()=>{e({currentFilter:n()})},saveFilter:r=>{const{currentFilter:n,savedFilters:a}=t(),o={name:r,filter:n},i=a.findIndex(e=>e.name===r);if(i>=0){const t=[...a];t[i]=o,e({savedFilters:t})}else e({savedFilters:[...a,o]})},loadFilter:r=>{const{savedFilters:n}=t(),a=n.find(e=>e.name===r);a&&e({currentFilter:a.filter})},deleteFilter:r=>{const{savedFilters:n}=t();e({savedFilters:n.filter(e=>e.name!==r)})},setActiveReportType:t=>{e({activeReportType:t})},clearError:()=>{e({error:null})},exportReport:async(r,n)=>{e({isExporting:!0,error:null});try{const{currentFilter:a}=t(),o=await(window.electronAPI?.reports?.exportReport(r,a,n));if(e({isExporting:!1}),!o?.success)throw new Error(o?.message||"فشل في تصدير التقرير");{const e=new CustomEvent("showToast",{detail:{title:"تم التصدير بنجاح",description:`تم حفظ التقرير في: ${o.filePath}`,type:"success"}});window.dispatchEvent(e)}return o}catch(a){console.error("Error exporting report:",a);const t=a instanceof Error?a.message:"Failed to export report";e({error:t,isExporting:!1});const r=new CustomEvent("showToast",{detail:{title:"خطأ في التصدير",description:t,type:"error"}});throw window.dispatchEvent(r),a}},clearCache:()=>{e({cachedReports:new Map})},startAutoRefresh:(r=5)=>{const{stopAutoRefresh:n}=t();n();const a=setInterval(async()=>{const{activeReportType:e,generateReport:r,generateAllReports:n}=t();try{"overview"===e?await n():await r(e)}catch(a){console.error("Auto-refresh failed:",a)}},60*r*1e3);e({autoRefreshInterval:a})},stopAutoRefresh:()=>{const{autoRefreshInterval:r}=t();r&&(clearInterval(r),e({autoRefreshInterval:null}))},syncReportsData:async()=>{const{generateAllReports:e}=t();try{await e();const t=new CustomEvent("showToast",{detail:{title:"تم تحديث البيانات",description:"تم مزامنة جميع التقارير بنجاح",type:"success"}});window.dispatchEvent(t)}catch(r){console.error("Data sync failed:",r);const e=new CustomEvent("showToast",{detail:{title:"خطأ في المزامنة",description:"فشل في تحديث البيانات",type:"error"}});window.dispatchEvent(e)}},getCachedReport:e=>{const{cachedReports:r,cacheExpiry:n}=t(),a=r.get(e);return a&&Date.now()-a.timestamp<n?a.data:null},setCachedReport:(r,n)=>{const{cachedReports:a}=t(),o=new Map(a);o.set(r,{data:n,timestamp:Date.now()}),e({cachedReports:o})},generateClinicNeedsReport:async e=>{try{const t=await(window.electronAPI?.clinicNeeds?.getAll())||[];let r=t;if(e?.startDate&&e?.endDate){const n=new Date(e.startDate),a=new Date(e.endDate);r=t.filter(e=>{const t=new Date(e.created_at);return t>=n&&t<=a})}const n=r.length,a=r.reduce((e,t)=>e+t.price*t.quantity,0),o=n>0?a/n:0,i=r.filter(e=>"pending"===e.status).length,s=r.filter(e=>"ordered"===e.status).length,c=r.filter(e=>"received"===e.status).length,l=r.filter(e=>"cancelled"===e.status).length,d=r.filter(e=>"urgent"===e.priority).length,p=r.filter(e=>"high"===e.priority).length,u=r.filter(e=>"medium"===e.priority).length,g=r.filter(e=>"low"===e.priority).length,h=n>0?c/n*100:0,y=n>0?d/n*100:0,w=[{status:"pending",count:i,percentage:n>0?i/n*100:0,value:r.filter(e=>"pending"===e.status).reduce((e,t)=>e+t.price*t.quantity,0)},{status:"ordered",count:s,percentage:n>0?s/n*100:0,value:r.filter(e=>"ordered"===e.status).reduce((e,t)=>e+t.price*t.quantity,0)},{status:"received",count:c,percentage:n>0?c/n*100:0,value:r.filter(e=>"received"===e.status).reduce((e,t)=>e+t.price*t.quantity,0)},{status:"cancelled",count:l,percentage:n>0?l/n*100:0,value:r.filter(e=>"cancelled"===e.status).reduce((e,t)=>e+t.price*t.quantity,0)}],f=[{priority:"urgent",count:d,percentage:n>0?d/n*100:0,value:r.filter(e=>"urgent"===e.priority).reduce((e,t)=>e+t.price*t.quantity,0)},{priority:"high",count:p,percentage:n>0?p/n*100:0,value:r.filter(e=>"high"===e.priority).reduce((e,t)=>e+t.price*t.quantity,0)},{priority:"medium",count:u,percentage:n>0?u/n*100:0,value:r.filter(e=>"medium"===e.priority).reduce((e,t)=>e+t.price*t.quantity,0)},{priority:"low",count:g,percentage:n>0?g/n*100:0,value:r.filter(e=>"low"===e.priority).reduce((e,t)=>e+t.price*t.quantity,0)}],v=new Map;r.forEach(e=>{const t=e.category||"غير محدد",r=v.get(t)||{count:0,value:0};v.set(t,{count:r.count+1,value:r.value+e.price*e.quantity})});const m=Array.from(v.entries()).map(([e,t])=>({category:e,count:t.count,value:t.value})),R=new Map;r.forEach(e=>{const t=e.supplier||"غير محدد",r=R.get(t)||{count:0,value:0};R.set(t,{count:r.count+1,value:r.value+e.price*e.quantity})});const E=Array.from(R.entries()).map(([e,t])=>({supplier:e,count:t.count,value:t.value})),F=[];for(let e=5;e>=0;e--){const r=new Date;r.setMonth(r.getMonth()-e);const n=new Date(r.getFullYear(),r.getMonth(),1),a=new Date(r.getFullYear(),r.getMonth()+1,0),o=t.filter(e=>{const t=new Date(e.created_at);return t>=n&&t<=a});F.push({period:`${r.getFullYear()}-${String(r.getMonth()+1).padStart(2,"0")}`,count:o.length,value:o.reduce((e,t)=>e+t.price*t.quantity,0)})}const C=r.map(e=>({need_name:e.need_name,value:e.price*e.quantity,quantity:e.quantity})).sort((e,t)=>t.value-e.value).slice(0,10),D=r.filter(e=>"pending"===e.status).slice(0,10),A=r.filter(e=>"urgent"===e.priority).slice(0,10),L=r.filter(e=>{const t=new Date(e.created_at),r=(Date.now()-t.getTime())/864e5;return"pending"===e.status&&r>30}).slice(0,10);return{totalNeeds:n,totalValue:a,pendingCount:i,orderedCount:s,receivedCount:c,cancelledCount:l,urgentCount:d,highPriorityCount:p,mediumPriorityCount:u,lowPriorityCount:g,averageNeedValue:o,completionRate:h,urgencyRate:y,needsByStatus:w,needsByPriority:f,needsByCategory:m,needsBySupplier:E,needsTrend:F,topExpensiveNeeds:C,pendingNeeds:D,urgentNeeds:A,overdueNeeds:L,recentlyReceived:r.filter(e=>"received"===e.status).sort((e,t)=>new Date(t.updated_at).getTime()-new Date(e.updated_at).getTime()).slice(0,10),needsList:r,filterInfo:e?`${e.startDate} - ${e.endDate}`:"جميع البيانات",dataCount:r.length}}catch(t){throw console.error("Error generating clinic needs report:",t),t}}})),{name:"reports-store"}),o=(t=["overview"])=>{const{generateReport:r,generateAllReports:n,clearCache:o}=a(),i=e.useRef(null),s=e.useRef(!1);return e.useEffect(()=>{const e=e=>{const a=e.type;console.log(`🔄 Real-time Reports: ${a} detected, queuing refresh...`),(async()=>{s.current||(s.current=!0,i.current=requestAnimationFrame(async()=>{i.current=null,console.log("🔄 Real-time Reports: Batch refreshing reports..."),o();try{t.includes("overview")||0===t.length?await n():await Promise.all(t.map(e=>r(e))),console.log("✅ Real-time Reports: Refresh completed successfully")}catch(e){console.error("❌ Real-time Reports: Refresh failed:",e)}finally{s.current=!1}}))})()},a=["patient-added","patient-updated","patient-deleted","patient-changed","appointment-added","appointment-updated","appointment-deleted","appointment-changed","payment-added","payment-updated","payment-deleted","payment-changed","inventory-added","inventory-updated","inventory-deleted","inventory-changed","clinic-needs-added","clinic-needs-updated","clinic-needs-deleted","clinic-needs-changed"];return a.forEach(t=>{window.addEventListener(t,e)}),()=>{i.current&&(cancelAnimationFrame(i.current),i.current=null),a.forEach(t=>{window.removeEventListener(t,e)}),s.current=!1}},[r,n,o,t]),{refreshReports:async()=>{o(),t.includes("overview")||0===t.length?await n():await Promise.all(t.map(e=>r(e)))},refreshSpecificReport:async e=>{o(),await r(e)}}},i=t=>{const{generateReport:r,clearCache:n}=a();return e.useEffect(()=>{const e=async()=>{console.log(`🔄 Real-time ${t} Reports: Data changed, refreshing...`),n();try{await r(t),console.log(`✅ Real-time ${t} Reports: Refresh completed`)}catch(e){console.error(`❌ Real-time ${t} Reports: Refresh failed:`,e)}},a={patients:["patient-added","patient-updated","patient-deleted","patient-changed"],appointments:["appointment-added","appointment-updated","appointment-deleted","appointment-changed"],financial:["payment-added","payment-updated","payment-deleted","payment-changed"],inventory:["inventory-added","inventory-updated","inventory-deleted","inventory-changed"],clinicNeeds:["clinic-needs-added","clinic-needs-updated","clinic-needs-deleted","clinic-needs-changed"]}[t]||[];return a.forEach(t=>{window.addEventListener(t,e)}),()=>{a.forEach(t=>{window.removeEventListener(t,e)})}},[t,r,n]),{refreshReport:async()=>{n(),await r(t)}}},s=()=>{const{generateAllReports:t,clearCache:r}=a();return e.useEffect(()=>{const e=async()=>{console.log("🔄 Real-time Dashboard: Data changed, refreshing..."),r();try{await t(),console.log("✅ Real-time Dashboard: Refresh completed")}catch(e){console.error("❌ Real-time Dashboard: Refresh failed:",e)}},n=["patient-added","patient-updated","patient-deleted","patient-changed","appointment-added","appointment-updated","appointment-deleted","appointment-changed","payment-added","payment-updated","payment-deleted","payment-changed","inventory-added","inventory-updated","inventory-deleted","inventory-changed","clinic-needs-added","clinic-needs-updated","clinic-needs-deleted","clinic-needs-changed"];return n.forEach(t=>{window.addEventListener(t,e)}),()=>{n.forEach(t=>{window.removeEventListener(t,e)})}},[t,r]),{refreshDashboard:async()=>{r(),await t()}}};function c(e){return!(!Array.isArray(e)||0===e.length)&&e.every(e=>"object"==typeof e&&null!==e&&Object.values(e).some(e=>"number"==typeof e&&!isNaN(e)&&isFinite(e)))}function l(e,t){return!(!Array.isArray(e)||0===e.length)&&e.every(e=>{const r=e[t];if(!r)return!1;const n=new Date(r);return!isNaN(n.getTime())&&n.getFullYear()>1900&&n.getFullYear()<2100})}function d(e){return e.filter(e=>e.count>0).map(e=>({...e,gender:e.gender||"غير محدد"}))}function p(e){return e.filter(e=>e.count>0).map(e=>({...e,ageGroup:e.ageGroup||"غير محدد"}))}function u(e){return e.filter(e=>e.value>0)}function g(e){return e.filter(e=>e.value>0)}function h(e){return e.filter(e=>e.amount>0).map(e=>({...e,method:e.method||"غير محدد"}))}export{i as a,d as b,u as c,c as d,p as e,h as f,g,o as h,s as i,a as u,l as v};
