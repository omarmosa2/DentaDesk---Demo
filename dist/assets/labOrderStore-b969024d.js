import{ak as e}from"./index-3a8dc84c.js";import{c as r}from"./utils-ec524415.js";const t=r()(e((e,r)=>({labOrders:[],filteredLabOrders:[],selectedLabOrder:null,isLoading:!1,error:null,searchQuery:"",statusFilter:"all",labFilter:"all",dateRangeFilter:{start:"",end:""},totalOrders:0,totalCost:0,totalPaid:0,totalRemaining:0,pendingOrders:0,completedOrders:0,cancelledOrders:0,loadLabOrders:async()=>{e({isLoading:!0,error:null});try{const t=await(window.electronAPI?.labOrders?.getAll())||[];e({labOrders:t,filteredLabOrders:t,isLoading:!1}),r().calculateStatistics(),r().filterLabOrders()}catch(t){console.error("❌ [DEBUG] Error loading lab orders:",t),e({error:t instanceof Error?t.message:"Failed to load lab orders",isLoading:!1})}},createLabOrder:async t=>{e({isLoading:!0,error:null});try{if(!window.electronAPI)throw new Error("Electron API is not available");if(!window.electronAPI.labOrders)throw new Error("Lab orders API is not available");if(!window.electronAPI.labOrders.create)throw new Error("Lab orders create method is not available");const o=t.cost-(t.paid_amount||0),s={...t,remaining_balance:o},l=window.electronAPI.labOrders.create(s),n=new Promise((e,r)=>setTimeout(()=>r(new Error("Request timeout after 10 seconds")),1e4));try{const t=await Promise.race([l,n]);if(!t)throw new Error("Failed to create lab order - no response from API");const{labOrders:a}=r(),o=[...a,t];return e({labOrders:o,isLoading:!1}),r().calculateStatistics(),void r().filterLabOrders()}catch(a){console.error("❌ [DEBUG] API Error caught:",a),console.error("❌ [DEBUG] API Error type:",typeof a),console.error("❌ [DEBUG] API Error constructor:",a?.constructor?.name),console.error("❌ [DEBUG] API Error message:",a?.message),console.error("❌ [DEBUG] API Error stack:",a?.stack);let e="Failed to create lab order";throw a&&"object"==typeof a?a.message?e=a.message:a.error&&a.error.message?e=a.error.message:a.toString&&"[object Object]"!==a.toString()&&(e=a.toString()):"string"==typeof a&&(e=a),new Error(e)}}catch(o){console.error("❌ [DEBUG] Error creating lab order:",o);let r="Failed to create lab order",t={};throw o instanceof Error?(r=o.message||"Unknown error occurred",t={message:o.message,stack:o.stack,name:o.name,cause:o.cause}):"string"==typeof o?(r=o,t={message:o,type:"string"}):"object"==typeof o&&null!==o?(r=o.message||JSON.stringify(o)||"Object error occurred",t={message:o.message,stack:o.stack,name:o.name,type:typeof o,keys:Object.keys(o),stringified:JSON.stringify(o)}):(r="Unknown error type: "+typeof o,t={type:typeof o,value:o}),console.error("❌ [DEBUG] Error details:",t),console.error("❌ [DEBUG] Full error object:",o),console.error("❌ [DEBUG] Error constructor:",o?.constructor?.name),console.error("❌ [DEBUG] Error prototype:",Object.getPrototypeOf(o)),e({error:r,isLoading:!1}),new Error(r)}},updateLabOrder:async(t,a)=>{e({isLoading:!0,error:null});try{const e=r().labOrders.find(e=>e.id===t);if(e&&(void 0!==a.cost||void 0!==a.paid_amount)){const r=a.cost??e.cost,t=a.paid_amount??(e.paid_amount||0);a.remaining_balance=r-t}if(await(window.electronAPI?.labOrders?.update(t,a))){await r().loadLabOrders();r().labOrders.find(e=>e.id===t)}}catch(o){throw console.error("❌ [DEBUG] Error updating lab order:",o),e({error:o instanceof Error?o.message:"Failed to update lab order",isLoading:!1}),o}},deleteLabOrder:async t=>{e({isLoading:!0,error:null});try{if(await(window.electronAPI?.labOrders?.delete(t))){const{labOrders:a}=r(),o=a.filter(e=>e.id!==t);e({labOrders:o,selectedLabOrder:r().selectedLabOrder?.id===t?null:r().selectedLabOrder,isLoading:!1}),r().calculateStatistics(),r().filterLabOrders()}}catch(a){throw console.error("Error deleting lab order:",a),e({error:a instanceof Error?a.message:"Failed to delete lab order",isLoading:!1}),a}},setSelectedLabOrder:r=>e({selectedLabOrder:r}),setSearchQuery:t=>{e({searchQuery:t}),r().filterLabOrders()},setStatusFilter:t=>{e({statusFilter:t}),r().filterLabOrders()},setLabFilter:t=>{e({labFilter:t}),r().filterLabOrders()},setDateRangeFilter:t=>{e({dateRangeFilter:t}),r().filterLabOrders()},filterLabOrders:()=>{const{labOrders:t,searchQuery:a,statusFilter:o,labFilter:s,dateRangeFilter:l}=r();let n=[...t];if(a.trim()&&(n=n.filter(e=>e.service_name.toLowerCase().includes(a.toLowerCase())||e.lab?.name&&e.lab.name.toLowerCase().includes(a.toLowerCase())||e.patient?.full_name&&e.patient.full_name.toLowerCase().includes(a.toLowerCase())||e.notes&&e.notes.toLowerCase().includes(a.toLowerCase()))),o&&"all"!==o&&(n=n.filter(e=>e.status===o)),s&&"all"!==s&&(n=n.filter(e=>e.lab_id===s)),l.start&&l.end){const e=new Date(l.start),r=new Date(l.end);n=n.filter(t=>{const a=new Date(t.order_date);return a>=e&&a<=r})}e({filteredLabOrders:n})},clearFilters:()=>{e({searchQuery:"",statusFilter:"all",labFilter:"all",dateRangeFilter:{start:"",end:""}}),r().filterLabOrders()},clearError:()=>e({error:null}),calculateStatistics:()=>{const{labOrders:t}=r(),a=t.length,o=t.reduce((e,r)=>e+r.cost,0),s=t.reduce((e,r)=>e+(r.paid_amount||0),0),l=t.reduce((e,r)=>e+(r.remaining_balance||0),0),n=t.filter(e=>"معلق"===e.status).length,i=t.filter(e=>"مكتمل"===e.status).length,d=t.filter(e=>"ملغي"===e.status).length;e({totalOrders:a,totalCost:o,totalPaid:s,totalRemaining:l,pendingOrders:n,completedOrders:i,cancelledOrders:d})},getOrdersByLab:e=>r().labOrders.filter(r=>r.lab_id===e),getOrdersByPatient:e=>r().labOrders.filter(r=>r.patient_id===e),getOrdersByStatus:e=>r().labOrders.filter(r=>r.status===e),getOrdersByDateRange:(e,t)=>r().labOrders.filter(r=>{const a=new Date(r.order_date);return a>=e&&a<=t}),getLabOrdersByTreatment:e=>r().labOrders.filter(r=>r.tooth_treatment_id===e)}),{name:"lab-order-store"}));export{t as u};
