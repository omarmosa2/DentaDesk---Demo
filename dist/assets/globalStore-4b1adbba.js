import{b6 as t,ak as e,bB as a}from"./index-3a8dc84c.js";import{c as r}from"./utils-ec524415.js";class n{static async getQuickAccessData(){try{const[t,e,a,r,n]=await Promise.all([this.getRecentPatients(),this.getTodayAppointments(),this.getPendingPayments(),this.getUrgentTreatments(),this.getRecentActivities()]);return{recentPatients:t,todayAppointments:e,pendingPayments:a,urgentTreatments:r,recentActivities:n,quickStats:await this.getQuickStats(r)}}catch(t){throw console.error("Error getting quick access data:",t),new Error("فشل في جلب بيانات الوصول السريع")}}static async getRecentPatients(){try{const t=await(window.electronAPI?.patients?.getAll?.())||[];return 0===t.length?[]:t.sort((t,e)=>new Date(e.updated_at||e.created_at).getTime()-new Date(t.updated_at||t.created_at).getTime()).slice(0,5)}catch(t){return console.error("Error getting recent patients:",t),[]}}static async getTodayAppointments(){try{const t=await(window.electronAPI?.appointments?.getAll?.())||[],e=new Date;return t.filter(t=>{const a=new Date(t.start_time);return this.isSameDay(a,e)}).sort((t,e)=>new Date(t.start_time).getTime()-new Date(e.start_time).getTime())}catch(t){return console.error("Error getting today appointments:",t),[]}}static async getPendingPayments(){try{return(await(window.electronAPI?.payments?.getAll?.())||[]).filter(t=>"pending"===t.status&&t.remaining_balance&&t.remaining_balance>0).sort((t,e)=>new Date(t.payment_date).getTime()-new Date(e.payment_date).getTime()).slice(0,10)}catch(t){return console.error("Error getting pending payments:",t),[]}}static async getUrgentTreatments(){try{const t=await(window.electronAPI?.treatments?.getAll?.())||[],e=new Date;return t.filter(t=>{if("planned"!==t.treatment_status&&"in_progress"!==t.treatment_status)return!1;const a=new Date(t.created_at);return Math.floor((e.getTime()-a.getTime())/864e5)>7}).sort((t,e)=>t.priority!==e.priority?t.priority-e.priority:new Date(t.created_at).getTime()-new Date(e.created_at).getTime()).slice(0,8)}catch(t){return console.error("Error getting urgent treatments:",t),[]}}static async getRecentActivities(){try{const t=[],e=await(window.electronAPI?.patients?.getAll?.())||[];e.sort((t,e)=>new Date(e.created_at).getTime()-new Date(t.created_at).getTime()).slice(0,3).forEach(e=>{t.push({id:`patient_added_${e.id}`,type:"patient_added",title:"مريض جديد",description:`تم إضافة المريض ${e.full_name}`,patientId:e.id,patientName:e.full_name,timestamp:e.created_at,icon:"👤"})});const a=await(window.electronAPI?.appointments?.getAll?.())||[];a.filter(t=>"completed"===t.status).sort((t,e)=>new Date(e.updated_at).getTime()-new Date(t.updated_at).getTime()).slice(0,3).forEach(e=>{t.push({id:`appointment_completed_${e.id}`,type:"appointment_created",title:"موعد مكتمل",description:`تم إكمال موعد ${e.patient?.full_name||"مريض غير محدد"}`,patientId:e.patient_id,patientName:e.patient?.full_name,timestamp:e.updated_at,icon:"📅"})});const r=await(window.electronAPI?.payments?.getAll?.())||[];return r.filter(t=>"completed"===t.status).sort((t,e)=>new Date(e.payment_date).getTime()-new Date(t.payment_date).getTime()).slice(0,3).forEach(e=>{t.push({id:`payment_received_${e.id}`,type:"payment_received",title:"دفعة مستلمة",description:`تم استلام دفعة ${e.amount}$ من ${e.patient?.full_name||"مريض غير محدد"}`,patientId:e.patient_id,patientName:e.patient?.full_name,timestamp:e.payment_date,icon:"💰"})}),t.sort((t,e)=>new Date(e.timestamp).getTime()-new Date(t.timestamp).getTime()).slice(0,10)}catch(t){return console.error("Error getting recent activities:",t),[]}}static async getQuickStats(t=[]){try{const[e,a,r]=await Promise.all([window.electronAPI?.patients?.getAll?.()||[],window.electronAPI?.appointments?.getAll?.()||[],window.electronAPI?.payments?.getAll?.()||[]]),n=new Date,i=n.toISOString().split("T")[0],s=e.filter(t=>{if(!t.created_at)return!1;return new Date(t.created_at).toISOString().split("T")[0]===i}).length,o=a.filter(t=>{const e=new Date(t.start_time);return this.isSameDay(e,n)}).length,c=r.filter(t=>{if(!t.payment_date)return!1;return new Date(t.payment_date).toISOString().split("T")[0]===i&&"completed"===t.status}).length;return{totalPatients:s,todayAppointments:o,pendingPayments:c,urgentAlerts:(Array.isArray(t)?t.length:0)+(c>0?1:0)+(o>0?1:0)}}catch(e){return console.error("Error getting today quick stats:",e),{totalPatients:0,todayAppointments:0,pendingPayments:0,urgentAlerts:0}}}static async refreshQuickAccessData(){return this.getQuickAccessData()}static async getMostVisitedPatients(){try{const t=await(window.electronAPI?.appointments?.getAll?.())||[],e=await(window.electronAPI?.patients?.getAll?.())||[],a={};return t.forEach(t=>{t.patient_id&&"completed"===t.status&&(a[t.patient_id]=(a[t.patient_id]||0)+1)}),e.filter(t=>a[t.id]>0).sort((t,e)=>(a[e.id]||0)-(a[t.id]||0)).slice(0,10)}catch(t){return console.error("Error getting most visited patients:",t),[]}}static async getPatientsNeedingFollowUp(){try{const t=await(window.electronAPI?.appointments?.getAll?.())||[],e=await(window.electronAPI?.patients?.getAll?.())||[],a=new Date,r={};return t.forEach(t=>{if(t.patient_id&&"completed"===t.status){const e=new Date(t.start_time);(!r[t.patient_id]||e>r[t.patient_id])&&(r[t.patient_id]=e)}}),e.filter(t=>{const e=r[t.id];if(!e)return!1;return Math.floor((a.getTime()-e.getTime())/864e5)>90}).slice(0,10)}catch(t){return console.error("Error getting patients needing follow up:",t),[]}}static isSameDay(t,e){return t.getFullYear()===e.getFullYear()&&t.getMonth()===e.getMonth()&&t.getDate()===e.getDate()}}class i{static async performGlobalSearch(t){const e=Date.now();try{const a=t.types||["patient","appointment","payment","treatment","prescription"],r=[];a.includes("patient")&&r.push(this.searchPatients(t)),a.includes("appointment")&&r.push(this.searchAppointments(t)),a.includes("payment")&&r.push(this.searchPayments(t)),a.includes("treatment")&&r.push(this.searchTreatments(t)),a.includes("prescription")&&r.push(this.searchPrescriptions(t));const n=await Promise.all(r),i={patients:a.includes("patient")&&n[a.indexOf("patient")]||[],appointments:a.includes("appointment")&&n[a.indexOf("appointment")]||[],payments:a.includes("payment")&&n[a.indexOf("payment")]||[],treatments:a.includes("treatment")&&n[a.indexOf("treatment")]||[],prescriptions:a.includes("prescription")&&n[a.indexOf("prescription")]||[],totalCount:0,searchTime:Date.now()-e,query:t.query};return i.totalCount=i.patients.length+i.appointments.length+i.payments.length+i.treatments.length+i.prescriptions.length,this.sortResultsByRelevance(i,t),t.limit&&this.limitResults(i,t.limit),i}catch(a){throw console.error("Global search error:",a),new Error("فشل في البحث الشامل")}}static async searchPatients(t){try{return(await(window.electronAPI?.patients?.search?.(t.query))||[]).map(e=>({id:e.id,type:"patient",title:e.full_name,subtitle:`#${e.serial_number} | ${e.age} سنة | ${"male"===e.gender?"ذكر":"أنثى"}`,description:`📞 ${e.phone||"غير محدد"} | 📧 ${e.email||"غير محدد"}`,relevanceScore:this.calculateRelevanceScore(t.query,[e.full_name,e.serial_number,e.phone||"",e.email||""]),data:e,relatedData:{patientId:e.id}}))}catch(e){return console.error("Search patients error:",e),[]}}static async searchAppointments(t){try{return(await(window.electronAPI?.appointments?.search?.(t.query))||[]).map(e=>({id:e.id,type:"appointment",title:e.title,subtitle:`${e.patient_name||"مريض غير محدد"} | ${this.formatDate(e.start_time)}`,description:`🕐 ${this.formatTime(e.start_time)} - ${this.formatTime(e.end_time)} | ${this.getStatusText(e.status)}`,relevanceScore:this.calculateRelevanceScore(t.query,[e.title,e.description||"",e.patient_name||"",e.notes||""]),data:e,relatedData:{patientId:e.patient_id,appointmentId:e.id}}))}catch(e){return console.error("Search appointments error:",e),[]}}static async searchPayments(t){try{return(await(window.electronAPI?.payments?.search?.(t.query))||[]).map(e=>({id:e.id,type:"payment",title:`دفعة ${e.amount}$ - ${e.patient_name||"مريض غير محدد"}`,subtitle:`${this.formatDate(e.payment_date)} | ${e.receipt_number||"بدون رقم إيصال"}`,description:`💳 ${"cash"===e.payment_method?"نقدي":"تحويل بنكي"} | ${this.getPaymentStatusText(e.status)}`,relevanceScore:this.calculateRelevanceScore(t.query,[e.patient?.full_name||"",e.description||"",e.receipt_number||"",e.notes||""]),data:e,relatedData:{patientId:e.patient_id,paymentId:e.id,appointmentId:e.appointment_id}}))}catch(e){return console.error("Search payments error:",e),[]}}static async searchTreatments(e){try{return(await(window.electronAPI?.treatments?.search?.(e.query))||[]).map(a=>({id:a.id,type:"treatment",title:`${t(a.treatment_type)} - السن ${a.tooth_number}`,subtitle:`${a.patient_name||"مريض غير محدد"} | ${this.getTreatmentStatusText(a.treatment_status)}`,description:`🦷 ${a.tooth_name} | 💰 ${a.cost||0}$`,relevanceScore:this.calculateRelevanceScore(e.query,[t(a.treatment_type),a.tooth_name,a.patient?.full_name||"",a.notes||""]),data:a,relatedData:{patientId:a.patient_id,treatmentId:a.id,appointmentId:a.appointment_id}}))}catch(a){return console.error("Search treatments error:",a),[]}}static async searchPrescriptions(t){try{return(await(window.electronAPI?.prescriptions?.search?.(t.query))||[]).map(e=>({id:e.id,type:"prescription",title:`وصفة ${e.patient_name||"مريض غير محدد"}`,subtitle:`${this.formatDate(e.prescription_date)} | ${e.medications?.length||0} دواء`,description:`💊 ${e.medications?.map(t=>t.medication_name).join(", ")||"لا توجد أدوية"}`,relevanceScore:this.calculateRelevanceScore(t.query,[e.patient?.full_name||"",e.notes||"",...e.medications?.map(t=>t.medication_name||"")||[]]),data:e,relatedData:{patientId:e.patient_id,appointmentId:e.appointment_id,treatmentId:e.tooth_treatment_id}}))}catch(e){return console.error("Search prescriptions error:",e),[]}}static calculateRelevanceScore(t,e){const a=t.toLowerCase();let r=0;return e.forEach(t=>{if(t){const e=t.toLowerCase();if(e===a)r+=100;else if(e.startsWith(a))r+=80;else if(e.includes(a))r+=60;else{a.split(" ").forEach(t=>{t.length>2&&e.includes(t)&&(r+=20)})}}}),r}static sortResultsByRelevance(t,e){const a=(t,a)=>"relevance"===e.sortBy?"asc"===e.sortOrder?t.relevanceScore-a.relevanceScore:a.relevanceScore-t.relevanceScore:"name"===e.sortBy?"asc"===e.sortOrder?t.title.localeCompare(a.title):a.title.localeCompare(t.title):0;t.patients.sort(a),t.appointments.sort(a),t.payments.sort(a),t.treatments.sort(a),t.prescriptions.sort(a)}static limitResults(t,e){if(t.totalCount<=e)return;const a=Math.floor(e/5),r=e%5;t.patients=t.patients.slice(0,a+(r>0?1:0)),t.appointments=t.appointments.slice(0,a+(r>1?1:0)),t.payments=t.payments.slice(0,a+(r>2?1:0)),t.treatments=t.treatments.slice(0,a+(r>3?1:0)),t.prescriptions=t.prescriptions.slice(0,a+(r>4?1:0)),t.totalCount=e}static formatDate(t){try{const e=new Date(t);if(isNaN(e.getTime()))return"--";const a=e.getDate().toString().padStart(2,"0"),r=(e.getMonth()+1).toString().padStart(2,"0");return`${a}/${r}/${e.getFullYear()}`}catch(e){return"--"}}static formatTime(t){return new Date(t).toLocaleTimeString("ar-EG",{hour:"2-digit",minute:"2-digit"})}static getStatusText(t){return{scheduled:"🟡 مجدول",completed:"🟢 مكتمل",cancelled:"🔴 ملغي",no_show:"⚫ لم يحضر"}[t]||t}static getPaymentStatusText(t){return{completed:"🟢 مكتمل",partial:"🟡 جزئي",pending:"🔴 آجل"}[t]||t}static getTreatmentStatusText(t){return{planned:"🟡 مخطط",in_progress:"🔵 قيد التنفيذ",completed:"🟢 مكتمل",cancelled:"🔴 ملغي"}[t]||t}}const s=r()(e((t,e)=>{if("undefined"!=typeof window){const t=()=>{e().loadAlerts()};["patient-added","patient-updated","patient-deleted","patient-changed","appointment-added","appointment-updated","appointment-deleted","appointment-changed","payment-added","payment-updated","payment-deleted","payment-changed","treatment-added","treatment-updated","treatment-deleted","treatment-changed","prescription-added","prescription-updated","prescription-deleted","prescription-changed","inventory-added","inventory-updated","inventory-deleted","inventory-changed"].forEach(e=>{window.addEventListener(e,t)})}return{globalSearchQuery:"",globalSearchResults:null,isSearching:!1,searchHistory:[],alerts:[],unreadAlertsCount:0,isLoadingAlerts:!1,quickAccessData:null,isLoadingQuickAccess:!1,recentActivities:[],quickActions:[],quickLinks:[],isGlobalLoading:!1,lastSyncTime:null,error:null,showGlobalSearch:!1,showQuickAccess:!0,showAlerts:!0,eventListenersSetup:!1,setGlobalSearchQuery:e=>{t({globalSearchQuery:e})},performGlobalSearch:async a=>{t({isSearching:!0,error:null});try{const r=Date.now(),n=await i.performGlobalSearch(a),s=Date.now()-r;t({globalSearchResults:{...n,searchTime:s,query:a.query},isSearching:!1}),a.query.trim()&&e().addToSearchHistory(a.query.trim())}catch(r){console.error("Global search error:",r),t({error:r instanceof Error?r.message:"فشل في البحث الشامل",isSearching:!1})}},clearSearchResults:()=>{t({globalSearchResults:null,globalSearchQuery:""})},addToSearchHistory:a=>{const{searchHistory:r}=e(),n=[a,...r.filter(t=>t!==a)].slice(0,10);t({searchHistory:n})},clearSearchHistory:()=>{t({searchHistory:[]})},loadAlerts:async()=>{t({isLoadingAlerts:!0,error:null});try{const e=await a.getAllAlerts(),r=e.filter(t=>!t.isRead&&!t.isDismissed).length;t({alerts:e,unreadAlertsCount:r,isLoadingAlerts:!1})}catch(e){console.error("Load alerts error:",e),t({error:e instanceof Error?e.message:"فشل في تحميل التنبيهات",isLoadingAlerts:!1,alerts:[],unreadAlertsCount:0})}},markAlertAsRead:async t=>{try{if(!e().alerts.find(e=>e.id===t))throw console.warn("⚠️ Alert not found in store:",t),new Error(`Alert with ID ${t} not found`);await a.updateAlert(t,{isRead:!0}),await e().loadAlerts()}catch(r){throw console.error("❌ Mark alert as read error:",r),r}},dismissAlert:async t=>{try{await a.updateAlert(t,{isDismissed:!0})}catch(e){console.error("Dismiss alert error:",e)}},snoozeAlert:async(t,e)=>{try{await a.updateAlert(t,{snoozeUntil:e})}catch(r){console.error("Snooze alert error:",r)}},createAlert:async t=>{try{await a.createAlert(t)}catch(e){console.error("Create alert error:",e)}},loadQuickAccessData:async()=>{t({isLoadingQuickAccess:!0,error:null});try{const e=await n.getQuickAccessData();t({quickAccessData:e,isLoadingQuickAccess:!1})}catch(e){console.error("Load quick access data error:",e),t({error:e instanceof Error?e.message:"فشل في تحميل بيانات الوصول السريع",isLoadingQuickAccess:!1})}},refreshQuickAccessData:async()=>{await e().loadQuickAccessData()},addActivity:a=>{const{recentActivities:r}=e(),n=[{...a,id:`activity_${Date.now()}_${Math.random().toString(36).substr(2,9)}`,timestamp:(new Date).toISOString()},...r].slice(0,50);t({recentActivities:n})},loadRecentActivities:async()=>{try{const e=await(window.electronAPI?.activities?.getRecent?.())||[];t({recentActivities:e})}catch(e){console.error("Load recent activities error:",e)}},executeQuickAction:t=>{const{quickActions:a}=e(),r=a.find(e=>e.id===t);r&&r.action()},addQuickAction:a=>{const{quickActions:r}=e();t({quickActions:[...r,a]})},removeQuickAction:a=>{const{quickActions:r}=e();t({quickActions:r.filter(t=>t.id!==a)})},syncAllData:async()=>{t({isGlobalLoading:!0});try{await Promise.all([e().loadAlerts(),e().loadQuickAccessData(),e().loadRecentActivities()]),t({lastSyncTime:(new Date).toISOString(),isGlobalLoading:!1})}catch(a){console.error("Sync all data error:",a),t({error:a instanceof Error?a.message:"Sync failed",isGlobalLoading:!1})}},clearError:()=>{t({error:null})},toggleGlobalSearch:()=>{t(t=>({showGlobalSearch:!t.showGlobalSearch}))},toggleQuickAccess:()=>{t(t=>({showQuickAccess:!t.showQuickAccess}))},toggleAlerts:()=>{t(t=>({showAlerts:!t.showAlerts}))}}},{name:"globalThis-store"}));export{s as u};
