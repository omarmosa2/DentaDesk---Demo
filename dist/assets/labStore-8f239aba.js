import{ak as e}from"./index-3a8dc84c.js";import{c as r}from"./utils-ec524415.js";const a=r()(e((e,r)=>({labs:[],selectedLab:null,isLoading:!1,error:null,searchQuery:"",filteredLabs:[],loadLabs:async()=>{e({isLoading:!0,error:null});try{const r=await(window.electronAPI?.labs?.getAll())||[];e({labs:r,filteredLabs:r,isLoading:!1})}catch(r){e({error:r instanceof Error?r.message:"Failed to load labs",isLoading:!1})}},createLab:async a=>{e({isLoading:!0,error:null});try{const s=await(window.electronAPI?.labs?.create(a));if(s){const{labs:a}=r(),o=[...a,s];e({labs:o,isLoading:!1}),r().filterLabs()}else console.warn("⚠️ [DEBUG] No lab returned from electronAPI")}catch(s){throw console.error("❌ [DEBUG] Error in labStore.createLab:",s),e({error:s instanceof Error?s.message:"Failed to create lab",isLoading:!1}),s}},updateLab:async(a,s)=>{e({isLoading:!0,error:null});try{const o=await(window.electronAPI?.labs?.update(a,s));if(o){const{labs:s}=r(),t=s.map(e=>e.id===a?o:e);e({labs:t,selectedLab:r().selectedLab?.id===a?o:r().selectedLab,isLoading:!1}),r().filterLabs()}}catch(o){throw console.error("Error updating lab:",o),e({error:o instanceof Error?o.message:"Failed to update lab",isLoading:!1}),o}},deleteLab:async a=>{e({isLoading:!0,error:null});try{if(await(window.electronAPI?.labs?.delete(a))){const{labs:s}=r(),o=s.filter(e=>e.id!==a);e({labs:o,selectedLab:r().selectedLab?.id===a?null:r().selectedLab,isLoading:!1}),r().filterLabs()}}catch(s){throw console.error("Error deleting lab:",s),e({error:s instanceof Error?s.message:"Failed to delete lab",isLoading:!1}),s}},setSelectedLab:r=>e({selectedLab:r}),setSearchQuery:a=>{e({searchQuery:a}),r().filterLabs()},filterLabs:()=>{const{labs:a,searchQuery:s}=r();if(!s.trim())return void e({filteredLabs:a});const o=a.filter(e=>e.name.toLowerCase().includes(s.toLowerCase())||e.contact_info&&e.contact_info.toLowerCase().includes(s.toLowerCase())||e.address&&e.address.toLowerCase().includes(s.toLowerCase()));e({filteredLabs:o})},clearError:()=>e({error:null})}),{name:"lab-store"}));export{a as u};
