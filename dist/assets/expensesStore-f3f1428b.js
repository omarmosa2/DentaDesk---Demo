import{c as e}from"./utils-ec524415.js";const n={status:"",expenseType:"",category:"",vendor:"",isRecurring:null,dateRange:{start:"",end:""}},t={totalExpenses:0,totalAmount:0,paidAmount:0,pendingAmount:0,overdueAmount:0,recurringExpenses:0,expensesByType:{},expensesByStatus:{},monthlyExpenses:{}},s=e((e,s)=>({expenses:[],filteredExpenses:[],selectedExpense:null,isLoading:!1,error:null,searchQuery:"",filters:n,analytics:t,categories:[],vendors:[],expenseTypes:["salary","utilities","rent","maintenance","supplies","insurance","other"],loadExpenses:async()=>{e({isLoading:!0,error:null});try{const n=await(window.electronAPI?.clinicExpenses?.getAll())||[];e({expenses:n,filteredExpenses:n,isLoading:!1}),s().calculateAnalytics(),s().updateCategories(),s().updateVendors(),s().filterExpenses()}catch(n){console.error("Error loading clinic expenses:",n),e({error:n instanceof Error?n.message:"Failed to load clinic expenses",isLoading:!1})}},createExpense:async n=>{e({isLoading:!0,error:null});try{const t=await window.electronAPI.clinicExpenses.create(n),{expenses:r}=s(),i=[...r,t];e({expenses:i,isLoading:!1}),s().calculateAnalytics(),s().updateCategories(),s().updateVendors(),s().filterExpenses(),"undefined"!=typeof window&&window.dispatchEvent&&window.dispatchEvent(new CustomEvent("clinic-expenses-changed",{detail:{type:"created",expenseId:t.id,expense:t}}))}catch(t){throw console.error("Error creating clinic expense:",t),e({error:t instanceof Error?t.message:"Failed to create clinic expense",isLoading:!1}),t}},updateExpense:async(n,t)=>{e({isLoading:!0,error:null});try{const r=await window.electronAPI.clinicExpenses.update(n,t),{expenses:i}=s(),a=i.map(e=>e.id===n?r:e);e({expenses:a,isLoading:!1}),s().calculateAnalytics(),s().updateCategories(),s().updateVendors(),s().filterExpenses(),"undefined"!=typeof window&&window.dispatchEvent&&window.dispatchEvent(new CustomEvent("clinic-expenses-changed",{detail:{type:"updated",expenseId:n,expense:r}}))}catch(r){throw console.error("Error updating clinic expense:",r),e({error:r instanceof Error?r.message:"Failed to update clinic expense",isLoading:!1}),r}},deleteExpense:async n=>{e({isLoading:!0,error:null});try{if(await window.electronAPI.clinicExpenses.delete(n)){const{expenses:t}=s(),r=t.filter(e=>e.id!==n);e({expenses:r,selectedExpense:null,isLoading:!1}),s().calculateAnalytics(),s().updateCategories(),s().updateVendors(),s().filterExpenses(),"undefined"!=typeof window&&window.dispatchEvent&&window.dispatchEvent(new CustomEvent("clinic-expenses-changed",{detail:{type:"deleted",expenseId:n}}))}}catch(t){throw console.error("Error deleting clinic expense:",t),e({error:t instanceof Error?t.message:"Failed to delete clinic expense",isLoading:!1}),t}},setSelectedExpense:n=>e({selectedExpense:n}),setSearchQuery:n=>{e({searchQuery:n}),s().filterExpenses()},setFilters:n=>{e({filters:n}),s().filterExpenses()},clearError:()=>e({error:null}),filterExpenses:()=>{const{expenses:n,searchQuery:t,filters:r}=s();let i=[...n];if(t.trim()){const e=t.toLowerCase();i=i.filter(n=>n.expense_name.toLowerCase().includes(e)||n.description?.toLowerCase().includes(e)||n.vendor?.toLowerCase().includes(e)||n.notes?.toLowerCase().includes(e))}if(r.status&&(i=i.filter(e=>e.status===r.status)),r.expenseType&&(i=i.filter(e=>e.expense_type===r.expenseType)),r.category&&(i=i.filter(e=>e.category===r.category)),r.vendor&&(i=i.filter(e=>e.vendor===r.vendor)),null!==r.isRecurring&&(i=i.filter(e=>e.is_recurring===r.isRecurring)),r.dateRange.start&&r.dateRange.end){const e=new Date(r.dateRange.start),n=new Date(e.getFullYear(),e.getMonth(),e.getDate(),0,0,0,0),t=new Date(r.dateRange.end),s=new Date(t.getFullYear(),t.getMonth(),t.getDate(),23,59,59,999);i=i.filter(e=>{const t=e.payment_date;if(!t)return!1;const r=new Date(t);let i;return i=t.includes("T")||t.includes(" ")?r:new Date(r.getFullYear(),r.getMonth(),r.getDate(),0,0,0,0),i>=n&&i<=s})}e({filteredExpenses:i})},calculateAnalytics:()=>{const{expenses:n}=s(),t=n.length,r=n.reduce((e,n)=>e+n.amount,0),i=n.filter(e=>"paid"===e.status).reduce((e,n)=>e+n.amount,0),a=n.filter(e=>"pending"===e.status).reduce((e,n)=>e+n.amount,0),o=n.filter(e=>"overdue"===e.status).reduce((e,n)=>e+n.amount,0),c=n.filter(e=>e.is_recurring).length,l=n.reduce((e,n)=>(e[n.expense_type]=(e[n.expense_type]||0)+n.amount,e),{}),p=n.reduce((e,n)=>(e[n.status]=(e[n.status]||0)+n.amount,e),{}),d=n.reduce((e,n)=>{const t=new Date(n.payment_date).toISOString().slice(0,7);return e[t]=(e[t]||0)+n.amount,e},{});e({analytics:{totalExpenses:t,totalAmount:r,paidAmount:i,pendingAmount:a,overdueAmount:o,recurringExpenses:c,expensesByType:l,expensesByStatus:p,monthlyExpenses:d}})},getExpensesByType:e=>{const{expenses:n}=s();return n.filter(n=>n.expense_type===e)},getExpensesByStatus:e=>{const{expenses:n}=s();return n.filter(n=>n.status===e)},getRecurringExpenses:()=>{const{expenses:e}=s();return e.filter(e=>e.is_recurring)},updateCategories:()=>{const{expenses:n}=s(),t=[...new Set(n.map(e=>e.category).filter(Boolean))];e({categories:t})},updateVendors:()=>{const{expenses:n}=s(),t=[...new Set(n.map(e=>e.vendor).filter(Boolean))];e({vendors:t})},updateExpenseTypes:()=>{e({expenseTypes:["salary","utilities","rent","maintenance","supplies","insurance","other"]})}}));export{s as u};
